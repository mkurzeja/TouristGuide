@model IEnumerable<TouristGuide.Models.Attraction>

@{
    
    
    ViewBag.Title = ViewBag.ListName;
}

<script src="@Url.Content("~/Scripts/jquery-1.5.1.min.js")" type="text/javascript"></script>
 <script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0"></script>
<script type="text/javascript">
    ListID = @ViewBag.ListID;
    que = "";
    $('#mapDiv').ready(updateRoute);
    function updateRoute() {
        
        $.ajax({
            async: false,
            type: "POST",
            url: encodeURI('@Url.Action("GetPoints", "ShortestPath")'),
            data: { id: ListID}
        }).done(function (msg) {
            que = msg;
            GetMap();
        });
        
    }
    
    
    function MakeGeocodeRequest(credentials)
    {
        var geocodeRequest = que + credentials;
        CallRestService(geocodeRequest);
    }
    function CallRestService(request)
    {
        var script = document.createElement("script");
        script.setAttribute("type", "text/javascript");
        script.setAttribute("src", request);
        document.body.appendChild(script);
    }
    function RouteCallback(result) {

                          
        if (result &&
              result.resourceSets &&
              result.resourceSets.length > 0 &&
              result.resourceSets[0].resources &&
              result.resourceSets[0].resources.length > 0) {
                   
            // Set the map view
            var bbox = result.resourceSets[0].resources[0].bbox;
            var viewBoundaries = Microsoft.Maps.LocationRect.fromLocations(new Microsoft.Maps.Location(bbox[0], bbox[1]), new Microsoft.Maps.Location(bbox[2], bbox[3]));
            map.setView({ bounds: viewBoundaries});


            // Draw the route
            var routeline = result.resourceSets[0].resources[0].routePath.line;
            var routepoints = new Array();
                     
            for (var i = 0; i < routeline.coordinates.length; i++) {

                routepoints[i]=new Microsoft.Maps.Location(routeline.coordinates[i][0], routeline.coordinates[i][1]);
            }
            
                     
            // Draw the route on the map
            var routeshape = new Microsoft.Maps.Polyline(routepoints, {strokeColor:new Microsoft.Maps.Color(200,0,0,200)});
            map.entities.push(routeshape);
                     
        }
    }
    var map = null, infobox, dataLayer;
    function GetMap()
    {
        // Initialize the map
        // Initialize the map
        map = new Microsoft.Maps.Map(document.getElementById("mapDiv"),{credentials:"Ai27_Zub6XP-KHKhEVbkfI-I7ExrDptEkbTJVWD_2q-QFhpue7qM_j8NRO5msIYm", 
            mapTypeId: Microsoft.Maps.MapTypeId.road, showDashboard:false,
            showScalebar:false,
            location:new Microsoft.Maps.Location(@Model.ElementAt(0).Coordinates.Latitude, @Model.ElementAt(0).Coordinates.Longitude)
        }); 
       
        dataLayer = new Microsoft.Maps.EntityCollection();
        map.entities.push(dataLayer);
        var infoboxLayer = new Microsoft.Maps.EntityCollection();
        map.entities.push(infoboxLayer);
        // map.SetCredentials("Ai27_Zub6XP-KHKhEVbkfI-I7ExrDptEkbTJVWD_2q-QFhpue7qM_j8NRO5msIYm");
        infobox = new Microsoft.Maps.Infobox(new Microsoft.Maps.Location(0, 0), { visible: false, offset: new Microsoft.Maps.Point(0, 20) });
        infoboxLayer.push(infobox);
        @foreach (var item in Model) {
         <text>    
        var pin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(@item.Coordinates.Latitude, @item.Coordinates.Longitude),{text : '@item.Name'}); 
        
        // Add a handler for the pushpin click event.
        Microsoft.Maps.Events.addHandler(pin, 'click', displayInfobox);

        // Hide the info box when the map is moved.
        Microsoft.Maps.Events.addHandler(map, 'viewchange', hideInfobox);
        dataLayer.push(pin);
        
          </text>    
        }
            
            map.getCredentials(MakeGeocodeRequest);
        }
    function displayInfobox(e) {
        if (e.targetType == 'pushpin') {
            infobox.setLocation(e.target.getLocation()); 
            infobox.setOptions({title: '', description: e.target.getText(), height: 30});
            infobox.setOptions({ visible: true });
        }
    }  
                    

    function hideInfobox(e)
    {
        infobox.setOptions({ visible: false });
    }
    function ClickGeocode(credentials)
    {
        map.getCredentials(MakeGeocodeRequest);
    }
    
    
</script>
@if (Model == null)
{
    <text>You don't have any attraction on this list</text>
}
else
{ 
    <table>
    @{int i = 0; }
    @foreach (var item in Model)
    {
         <tr style="height:20px; font-size:medium">
            @{i = i + 1;}
            <td>@i</td>
           <td style="text-align:left">@Html.ActionLink(item.Name, "Details", "Attraction", new { id = item.ID }, null)</td> 
           <td> @Html.ActionLink(" ", "Delete", new { id = item.ID, listId = @ViewBag.ListID }, new { @class = "imgLinkDelete", })</td> 
      </tr>    
    }
        <tr>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>@Html.ActionLink(" ", "Index", "UserLists", null, new { @class = "imgBack", })</td>
            <td></td>

            <td>@Html.ActionLink(" ", "NewAttraction", new { listId = @ViewBag.ListID }, new { @class = "imgNew", })</td>
        </tr>
    </table>  
    <div id="route"></div>
    <div id='mapDiv' style="position:relative; width:400px; height:400px;"></div>
}
